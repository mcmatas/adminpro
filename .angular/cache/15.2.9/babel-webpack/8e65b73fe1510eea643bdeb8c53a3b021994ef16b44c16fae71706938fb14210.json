{"ast":null,"code":"import { tap, map, catchError } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { Usuario } from '../models/usuario.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst base_url = environment.base_url;\nexport let UsuarioService = /*#__PURE__*/(() => {\n  class UsuarioService {\n    constructor(http, router, ngZone) {\n      this.http = http;\n      this.router = router;\n      this.ngZone = ngZone;\n      this.googleInit();\n    }\n    get token() {\n      return localStorage.getItem('token') || '';\n    }\n    get uid() {\n      return this.usuario.uid || '';\n    }\n    get headers() {\n      return {\n        headers: {\n          'x-token': this.token\n        }\n      };\n    }\n    googleInit() {\n      return new Promise(resolve => {\n        gapi.load('auth2', () => {\n          this.auth2 = gapi.auth2.init({\n            client_id: '729097712123-a85fp5g6coigshgbdlge4qcfmhn13slu.apps.googleusercontent.com',\n            cookiepolicy: 'single_host_origin'\n          });\n          resolve();\n        });\n      });\n    }\n    logout() {\n      localStorage.removeItem('token');\n      google.accounts.id.revoke('marccerrillomatas@gmail.com', () => {\n        this.ngZone.run(() => {\n          this.router.navigateByUrl('/login');\n        });\n      });\n    }\n    validarToken() {\n      return this.http.get(`${base_url}/login/renew`, {\n        headers: {\n          'x-token': this.token\n        }\n      }).pipe(map(resp => {\n        const {\n          email,\n          google,\n          nombre,\n          role,\n          img = '',\n          uid\n        } = resp.usuario;\n        this.usuario = new Usuario(nombre, email, '', img, google, role, uid);\n        localStorage.setItem('token', resp.token);\n        return true;\n      }), catchError(error => of(false)));\n    }\n    crearUsuario(formData) {\n      return this.http.post(`${base_url}/usuarios`, formData).pipe(tap(resp => {\n        localStorage.setItem('token', resp.token);\n      }));\n    }\n    actualizarPerfil(data) {\n      data = Object.assign(Object.assign({}, data), {\n        role: this.usuario.role\n      });\n      return this.http.put(`${base_url}/usuarios/${this.uid}`, data, {\n        headers: {\n          'x-token': this.token\n        }\n      });\n    }\n    login(formData) {\n      return this.http.post(`${base_url}/login`, formData).pipe(tap(resp => {\n        localStorage.setItem('token', resp.token);\n      }));\n    }\n    loginGoogle(token) {\n      return this.http.post(`${base_url}/login/google`, {\n        token\n      }).pipe(tap(resp => {\n        localStorage.setItem('token', resp.token);\n      }));\n    }\n    cargarUsuarios(desde = 0) {\n      const url = `${base_url}/usuarios?desde=${desde}`;\n      // Lo que hay entre <> es una interface que nos dice lo que retorna el objeto\n      return this.http.get(url, this.headers).pipe(map(resp => {\n        const usuarios = resp.usuarios.map(user => new Usuario(user.nombre, user.email, '', user.img, user.google, user.role, user.uid));\n        return {\n          total: resp.total,\n          usuarios\n        };\n      }));\n    }\n    eliminarUsuario(usuario) {\n      const url = `${base_url}/usuarios/${usuario.uid}`;\n      return this.http.get(url, this.headers);\n    }\n  }\n  UsuarioService.ɵfac = function UsuarioService_Factory(t) {\n    return new (t || UsuarioService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i0.NgZone));\n  };\n  UsuarioService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsuarioService,\n    factory: UsuarioService.ɵfac,\n    providedIn: 'root'\n  });\n  return UsuarioService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}